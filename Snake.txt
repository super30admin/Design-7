/**
Time Complexity - O(1) for all operations
Space Complexity - O(w*h) + O(l) where l is length of snake
 */
class SnakeGame {

    LinkedList<int[]> snake;
    boolean[][] visited;
    int[][] food;
    int foodIndex;
    int height;
    int width;
    int[] dir;


    public SnakeGame(int width, int height, int[][] food) {
        this.height = height;
        this.width = width;
        this.food = food;
        this.foodIndex = 0;
        this.visited = new boolean[height][width];
        this.dir = new int[]{0, 0};
        this.snake = new LinkedList<>();
        // add head/tail to 0,0
        this.snake.add(this.dir);
    }
    
    public int move(String direction) {
        if (direction.equals("U")) {
            dir[0]--;
        } else if (direction.equals("D")) {
            dir[0]++;
        } else if (direction.equals("R")) {
            dir[1]++;
        } else if (direction.equals("L")) {
            dir[1]--;
        }

        if (dir[0] < 0 || dir[0] == this.height || dir[1] <0 || dir[1] == this.width) {
            return -1;
        }

        // self hit
        if (visited[dir[0]][dir[1]]) {
            return -1;
        }

        // eats food and grows by 1
        if (foodIndex < food.length && dir[0] == food[foodIndex][0] && dir[1] == food[foodIndex][1]) {
            snake.addFirst(new int[]{dir[0], dir[1]});
            visited[dir[0]][dir[1]] = true;
            foodIndex++;
        } else {
            // shifts by 1
            snake.addFirst(new int[]{dir[0], dir[1]});
            visited[dir[0]][dir[1]] = true;
            snake.removeLast();
            int[] del = snake.getLast();
            visited[del[0]][del[1]] = false;
        }
        return snake.size() -1;
    }
}

/**
 * Your SnakeGame object will be instantiated and called as such:
 * SnakeGame obj = new SnakeGame(width, height, food);
 * int param_1 = obj.move(direction);
 */
